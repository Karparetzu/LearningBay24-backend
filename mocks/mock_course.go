// Code generated by MockGen. DO NOT EDIT.
// Source: learningbay24.de/backend/course (interfaces: CourseService)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	null "github.com/volatiletech/null/v8"
	models "learningbay24.de/backend/models"
)

// MockCourseService is a mock of CourseService interface.
type MockCourseService struct {
	ctrl     *gomock.Controller
	recorder *MockCourseServiceMockRecorder
}

// MockCourseServiceMockRecorder is the mock recorder for MockCourseService.
type MockCourseServiceMockRecorder struct {
	mock *MockCourseService
}

// NewMockCourseService creates a new mock instance.
func NewMockCourseService(ctrl *gomock.Controller) *MockCourseService {
	mock := &MockCourseService{ctrl: ctrl}
	mock.recorder = &MockCourseServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCourseService) EXPECT() *MockCourseServiceMockRecorder {
	return m.recorder
}

// CreateCourse mocks base method.
func (m *MockCourseService) CreateCourse(arg0 string, arg1 null.String, arg2 string, arg3 int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCourse", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCourse indicates an expected call of CreateCourse.
func (mr *MockCourseServiceMockRecorder) CreateCourse(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCourse", reflect.TypeOf((*MockCourseService)(nil).CreateCourse), arg0, arg1, arg2, arg3)
}

// DeleteCourse mocks base method.
func (m *MockCourseService) DeleteCourse(arg0 int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCourse", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCourse indicates an expected call of DeleteCourse.
func (mr *MockCourseServiceMockRecorder) DeleteCourse(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCourse", reflect.TypeOf((*MockCourseService)(nil).DeleteCourse), arg0)
}

// DeleteUserFromCourse mocks base method.
func (m *MockCourseService) DeleteUserFromCourse(arg0, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserFromCourse", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserFromCourse indicates an expected call of DeleteUserFromCourse.
func (mr *MockCourseServiceMockRecorder) DeleteUserFromCourse(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserFromCourse", reflect.TypeOf((*MockCourseService)(nil).DeleteUserFromCourse), arg0, arg1)
}

// EnrollUser mocks base method.
func (m *MockCourseService) EnrollUser(arg0, arg1 int, arg2 string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnrollUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnrollUser indicates an expected call of EnrollUser.
func (mr *MockCourseServiceMockRecorder) EnrollUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnrollUser", reflect.TypeOf((*MockCourseService)(nil).EnrollUser), arg0, arg1, arg2)
}

// GetCourse mocks base method.
func (m *MockCourseService) GetCourse(arg0 int) (*models.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourse", arg0)
	ret0, _ := ret[0].(*models.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourse indicates an expected call of GetCourse.
func (mr *MockCourseServiceMockRecorder) GetCourse(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourse", reflect.TypeOf((*MockCourseService)(nil).GetCourse), arg0)
}

// GetCoursesFromUser mocks base method.
func (m *MockCourseService) GetCoursesFromUser(arg0 int) (models.CourseSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoursesFromUser", arg0)
	ret0, _ := ret[0].(models.CourseSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoursesFromUser indicates an expected call of GetCoursesFromUser.
func (mr *MockCourseServiceMockRecorder) GetCoursesFromUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoursesFromUser", reflect.TypeOf((*MockCourseService)(nil).GetCoursesFromUser), arg0)
}

// GetUsersInCourse mocks base method.
func (m *MockCourseService) GetUsersInCourse(arg0 int) (models.UserSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersInCourse", arg0)
	ret0, _ := ret[0].(models.UserSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersInCourse indicates an expected call of GetUsersInCourse.
func (mr *MockCourseServiceMockRecorder) GetUsersInCourse(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersInCourse", reflect.TypeOf((*MockCourseService)(nil).GetUsersInCourse), arg0)
}

// UpdateCourse mocks base method.
func (m *MockCourseService) UpdateCourse(arg0 int, arg1 string, arg2 null.String, arg3 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCourse", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCourse indicates an expected call of UpdateCourse.
func (mr *MockCourseServiceMockRecorder) UpdateCourse(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCourse", reflect.TypeOf((*MockCourseService)(nil).UpdateCourse), arg0, arg1, arg2, arg3)
}
